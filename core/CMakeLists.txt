PROJECT(luacluter)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12) 
option ( LUA_USE_LUAJIT "Use luajit" OFF)

if (MSVC)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/libs)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/libs)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/bin/server)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/bin/server)
else()

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/libs)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/libs)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin/server)
endif ()

if (APPLE)
   cmake_policy (SET CMP0042 OLD)
endif ()

ADD_SUBDIRECTORY( ./src/lib/common )
ADD_SUBDIRECTORY( ./src/lib/3rd/3dmath )
ADD_SUBDIRECTORY( ./src/lib/3rd/lua-mongodb )
ADD_SUBDIRECTORY( ./src/lib/3rd/libuv EXCLUDE_FROM_ALL )
ADD_SUBDIRECTORY( ./src/lib/3rd/openssl EXCLUDE_FROM_ALL )
ADD_SUBDIRECTORY( ./src/lib/3rd/hiredis EXCLUDE_FROM_ALL )
ADD_SUBDIRECTORY( ./src/lib/3rd/mongo-c-driver EXCLUDE_FROM_ALL )
ADD_SUBDIRECTORY( ./src/lib/3rd/luasocket EXCLUDE_FROM_ALL )
ADD_SUBDIRECTORY( ./src/lib/3rd/sigar EXCLUDE_FROM_ALL )

if (LUA_USE_LUAJIT)
ADD_SUBDIRECTORY( ./src/lib/3rd/luajit EXCLUDE_FROM_ALL )
else ()
ADD_SUBDIRECTORY( ./src/lib/3rd/lua/src )
endif ()

AUX_SOURCE_DIRECTORY(./src/server/src DIR_SRCS)
AUX_SOURCE_DIRECTORY(./src/server/test DIR_SRCS)
ADD_EXECUTABLE(luacluter ${DIR_SRCS})

set_target_properties(luacluter PROPERTIES DEBUG_POSTFIX "_d")

TARGET_LINK_LIBRARIES(luacluter common )
TARGET_LINK_LIBRARIES(luacluter 3dmath )
TARGET_LINK_LIBRARIES(luacluter uv_a )
TARGET_LINK_LIBRARIES(luacluter crypto)
TARGET_LINK_LIBRARIES(luacluter ssl)
TARGET_LINK_LIBRARIES(luacluter hiredis_static)
TARGET_LINK_LIBRARIES(luacluter lua-mongodb)
TARGET_LINK_LIBRARIES(luacluter bson_static)
TARGET_LINK_LIBRARIES(luacluter mongoc_static)
TARGET_LINK_LIBRARIES(luacluter socket)
TARGET_LINK_LIBRARIES(luacluter mime)
TARGET_LINK_LIBRARIES(luacluter sigar_static)

if ( UNIX )
set(CMAKE_VERBOSE_MAKEFILE ON)
find_path(READLINE_INCLUDE_DIR readline/readline.h)
set_property(TARGET luacluter PROPERTY C_STANDARD 99)
TARGET_LINK_LIBRARIES(luacluter readline)
endif ()

if (LUA_USE_LUAJIT)
TARGET_LINK_LIBRARIES( luacluter liblua)
target_include_directories( luacluter PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/luajit/src)
target_include_directories( common PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/luajit/src)
target_include_directories( lua-mongodb PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/luajit/src)
target_include_directories( socket PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/luajit/src)
target_include_directories( mime PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/luajit/src)

target_include_directories( luacluter PUBLIC ${PROJECT_BINARY_DIR}/src/lib/3rd/luajit)
target_include_directories( common PUBLIC ${PROJECT_BINARY_DIR}/src/lib/3rd/luajit)
target_include_directories( lua-mongodb PUBLIC ${PROJECT_BINARY_DIR}/src/lib/3rd/luajit)
target_include_directories( socket PUBLIC ${PROJECT_BINARY_DIR}/src/lib/3rd/luajit)
target_include_directories( mime PUBLIC ${PROJECT_BINARY_DIR}/src/lib/3rd/luajit)
else ()
TARGET_LINK_LIBRARIES( luacluter lua)
target_include_directories( luacluter PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/lua/src)
target_include_directories( common PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/lua/src)
target_include_directories( lua-mongodb PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/lua/src)
target_include_directories( socket PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/lua/src)
target_include_directories( mime PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/3rd/lua/src)
endif ()


target_include_directories( luacluter PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/common)
target_include_directories( luacluter PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/3dmath)
target_include_directories( luacluter PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/libuv/include)
target_include_directories( luacluter PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/hiredis)
target_include_directories( luacluter PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/luasocket/src)
target_include_directories( luacluter PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/lua-mongodb)
target_include_directories( luacluter PRIVATE ${PROJECT_SOURCE_DIR}/src/server/src)
target_include_directories( luacluter PRIVATE ${PROJECT_SOURCE_DIR}/src/server/test)

target_include_directories( common PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/libuv/include)
target_include_directories( common PRIVATE ${PROJECT_BINARY_DIR}/src/lib/3rd/openssl/include)
target_include_directories( common PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/hiredis)
target_include_directories( common PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/sigar/include)

target_include_directories( lua-mongodb PRIVATE ${PROJECT_BINARY_DIR}/src/lib/3rd/mongo-c-driver/src/libbson/src/bson)
target_include_directories( lua-mongodb PRIVATE ${PROJECT_BINARY_DIR}/src/lib/3rd/mongo-c-driver/src/libmongoc/src/mongoc)
target_include_directories( lua-mongodb PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/mongo-c-driver/src/libbson/src)
target_include_directories( lua-mongodb PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/mongo-c-driver/src/libmongoc/src)
target_include_directories( lua-mongodb PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/3rd/mongo-c-driver/src/common)
target_compile_definitions(lua-mongodb PRIVATE MONGOC_STATIC BSON_STATIC)
